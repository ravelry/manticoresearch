<?xml version="1.0" encoding="utf-8"?>
<test>

<name>percolate query vs docs matched</name>
<skip_indexer/>

<config>

searchd
{
	<searchd_settings/>
	workers = threads
}

index pq
{
	type = percolate
	path			= <data_path/>/pq_re
	rt_field 		= title
	rt_attr_json	= json_data
}

index pq1
{
	type = percolate
	path			= <data_path/>/pq_1
	rt_field 		= title
	rt_field 		= content
	rt_attr_json	= json_data
	
    html_strip		= 1
    html_remove_elements = style, script
    charset_table 	= english
}

index pq2
{
	type = percolate
	path			= <data_path/>/pq_2
	rt_field 		= title
	rt_field 		= content
	rt_attr_json	= json_data
	
    html_strip		= 1
    html_remove_elements = style, script
    charset_table 	= english
	index_sp = 1
}

</config>

<sphqueries>
<sphinxql>TRUNCATE rtindex pq</sphinxql>
<sphinxql>INSERT INTO pq (query, filters) VALUES ('', 'json_data.text.status.state=0')</sphinxql>
<sphinxql>INSERT INTO pq (query, filters) VALUES ('', 'json_data.text.status.favorited=\'false\'')</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"id":21,"json_data":{"text":{"status":{"state":0}}}}'), 1 as docs, 1 as query, 'id' as docs_id)</sphinxql>

<!-- docs missed due to zero counter from not matched stored query -->
<sphinxql>TRUNCATE rtindex pq</sphinxql>
<sphinxql>INSERT INTO pq (query, filters) VALUES ('', 'json_data.text.status.favorited=\'false\'')</sphinxql>
<sphinxql>INSERT INTO pq (query, filters) VALUES ('', 'json_data.text.status.state=0')</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"id":21,"json_data":{"text":{"status":{"state":0}}}}'), 1 as docs, 1 as query, 'id' as docs_id)</sphinxql>

<sphinxql>TRUNCATE rtindex pq</sphinxql>
<sphinxql>INSERT INTO pq (query, filters) VALUES ('', 'json_data.text.status.favorited=\'false\'')</sphinxql>
<sphinxql>INSERT INTO pq (query, filters) VALUES ('', 'json_data.text.status.staff=\'got some\'')</sphinxql>
<sphinxql>INSERT INTO pq (query, filters) VALUES ('', 'json_data.text.status.state=0')</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"id":21,"json_data":{"text":{"status":{"state":0}}}}'), 1 as docs, 1 as query, 'id' as docs_id)</sphinxql>

<!-- same for full-text path -->
<sphinxql>TRUNCATE rtindex pq</sphinxql>
<sphinxql>INSERT INTO pq (query, filters) VALUES ('test', 'json_data.text.status.state=0')</sphinxql>
<sphinxql>INSERT INTO pq (query, filters) VALUES ('test', 'json_data.text.status.favorited=\'false\'')</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"id":21,"json_data":{"text":{"status":{"state":0}}}, "title":"test me"}'), 1 as docs, 1 as query, 'id' as docs_id)</sphinxql>

<sphinxql>TRUNCATE rtindex pq</sphinxql>
<sphinxql>INSERT INTO pq (query, filters) VALUES ('test', 'json_data.text.status.favorited=\'false\'')</sphinxql>
<sphinxql>INSERT INTO pq (query, filters) VALUES ('test', 'json_data.text.status.state=0')</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"id":21,"json_data":{"text":{"status":{"state":0}}}, "title":"test me"}'), 1 as docs, 1 as query, 'id' as docs_id)</sphinxql>

<sphinxql>TRUNCATE rtindex pq</sphinxql>
<sphinxql>INSERT INTO pq (query, filters) VALUES ('test', 'json_data.text.status.favorited=\'false\'')</sphinxql>
<sphinxql>INSERT INTO pq (query, filters) VALUES ('test', 'json_data.text.status.staff=\'got some\'')</sphinxql>
<sphinxql>INSERT INTO pq (query, filters) VALUES ('test', 'json_data.text.status.state=0')</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"id":21,"json_data":{"text":{"status":{"state":0}}}, "title":"test me"}'), 1 as docs, 1 as query, 'id' as docs_id)</sphinxql>

<!-- regression - stripper alter field -->
<sphinxql>INSERT INTO pq1 (query) VALUES ('@title c')</sphinxql>
<sphinxql>CALL PQ('pq1', ('{\"title\":\"a\",\"content\":\"c\"}'),1 as docs,1 as query)</sphinxql>
<sphinxql>CALL PQ('pq1', ('{\"content\":\"c\"}'),1 as docs,1 as query)</sphinxql>
<sphinxql>CALL PQ('pq1', ('{\"title\":\"c\"}'),1 as docs,1 as query)</sphinxql>

<!-- regression - SENTENCE did not work at PQ -->
<sphinxql>INSERT INTO pq2 (query) VALUES ('abc SENTENCE def')</sphinxql>

<sphinxql>CALL PQ('pq2', 'The abc? Def or not.', 0 as docs_json, 1 as query, 1 as docs)</sphinxql>
<sphinxql>CALL PQ('pq2', 'The abc or def is not.', 0 as docs_json, 1 as query, 1 as docs)</sphinxql>
<sphinxql>CALL PQ('pq2', 'abc? Def', 0 as docs_json, 1 as query, 1 as docs)</sphinxql>
</sphqueries>

</test>
