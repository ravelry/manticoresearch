<?xml version="1.0" encoding="utf-8"?>
<test>

<name>distributed percolate indexes</name>

<skip_indexer/>

<requires>
<http/>
</requires>

<config>
searchd
{
	<searchd_settings/>
	binlog_path =
}

index pq
{
	type = percolate
	path			= <data_path/>/pq
	rt_field 		= title
	rt_attr_uint = gid
}

index pq1
{
	type = percolate
	path			= <data_path/>/pq1
	rt_field = title
	rt_attr_uint = gid
}

index pl_d1
{
	type = distributed
	local = pq
}

index pl_d2
{
	type = distributed
	local = pq
	local = pq1
}

index pm_d2
{
	type = distributed
	local = pq
	agent = <my_address/>:pq1
}

index pq_d1
{
	type = distributed
	agent = <my_address/>:pq
}

index pq_d2
{
	type = distributed
	agent = <my_address/>:pq
	agent = <my_address/>:pq1
}


</config>

<metaindex name='META:multi'>
	<index>pq</index>
	<index>pq1</index>
	<index>pl_d1</index>
    <index>pq_d1</index>
	<index>pl_d2</index>
	<index>pm_d2</index>
	<index>pq_d2</index>
</metaindex>

<sphqueries>

<!-- use manually assigned qids in order to test sharded calls -->
<sphinxql>INSERT INTO pq (id, query, filters) VALUES ( 1, 'filter test', 'gid >= 10' )</sphinxql>
<sphinxql>INSERT INTO pq1 (id, query, filters) VALUES ( 2, 'angry', 'gid >= 10 OR gid &lt;= 3')
</sphinxql>
<sphinxql>select * from META:multi</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('{"title":"angry test", "gid":3 }', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 'sharded' as mode)</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('{"title":"angry test", "gid":3 }', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 'sharded' as mode, 10 as shift)</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('{"title":"angry test", "gid":3 }', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 'sharded' as mode, 'gid' as docs_id)</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('{"title":"angry test", "gid":3 }', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 'sharded' as mode, 'gid' as docs_id, 10 as shift)</sphinxql>
<sphinxql>SHOW WARNINGS</sphinxql>

<!-- doc as array of docs -->
<sphinxql>CALL PQ ('META:multi', ('[{"title":"angry test", "gid":3 }, {"title":"filter test doc2", "gid":13}]'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 'sharded' as mode)</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('[{"title":"angry test", "gid":3 }, {"title":"filter test doc2", "gid":13}]'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 'sharded' as mode, 10 as shift)</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('[{"title":"angry test", "gid":3 }, {"title":"filter test doc2", "gid":13}]'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 'sharded' as mode, 'gid' as docs_id)</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('[{"title":"angry test", "gid":3 }, {"title":"filter test doc2", "gid":13}]'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 'sharded' as mode, 'gid' as docs_id, 10 as shift)</sphinxql>

<!-- add the same gids to another shards, i.e. make them mirrors -->
<sphinxql>INSERT INTO pq1 (id, query, filters) VALUES ( 1, 'filter test', 'gid >= 10' )</sphinxql>
<sphinxql>INSERT INTO pq (id, query, filters) VALUES ( 2, 'angry', 'gid >= 10 OR gid &lt;= 3')</sphinxql>

<sphinxql>select * from META:multi</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('{"title":"angry test", "gid":3 }', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query)</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('{"title":"angry test", "gid":3 }', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 10 as shift)</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('{"title":"angry test", "gid":3 }', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 'gid' as docs_id)</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('{"title":"angry test", "gid":3 }', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 'gid' as docs_id, 10 as shift)</sphinxql>
<sphinxql>SHOW WARNINGS</sphinxql>

<!-- doc as array of docs -->
<sphinxql>CALL PQ ('META:multi', ('[{"title":"angry test", "gid":3 }, {"title":"filter test doc2", "gid":13}]'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query)</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('[{"title":"angry test", "gid":3 }, {"title":"filter test doc2", "gid":13}]'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 10 as shift)</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('[{"title":"angry test", "gid":3 }, {"title":"filter test doc2", "gid":13}]'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 'gid' as docs_id)</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('[{"title":"angry test", "gid":3 }, {"title":"filter test doc2", "gid":13}]'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 'gid' as docs_id, 10 as shift)</sphinxql>

<!-- bad json -->
<sphinxql>CALL PQ ('META:multi', ('[{"title":"angry test", "gid":3, {"title":"filter test doc2", "gid":13}]'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query)</sphinxql>
<!-- good, but ill-formed json (int instead of 2-nd doc) -->
<sphinxql>CALL PQ ('META:multi', ('[{"title":"angry test", "gid":3}, 1000]'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query)</sphinxql>

<!-- empty json -->
<sphinxql>CALL PQ ('META:multi', ('{"title":"angry test", "gid":3}', '', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query, 1 as skip_empty)</sphinxql>
<sphinxql>CALL PQ ('META:multi', ('{"title":"angry test", "gid":3}', '', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as verbose, 1 as docs_json, 1 as query)</sphinxql>

<!-- bad json holding with no-fail -->
<sphinxql>CALL PQ ('pq', ('{"title":"filter test doc2", "gid":13}','[{"title":"angry test", "gid":3}, 1000]'), 1 as skip_bad_json )</sphinxql>
<sphinxql>SHOW WARNINGS</sphinxql>
<sphinxql>CALL PQ ('pl_d1', ('{"title":"filter test doc2", "gid":13}','[{"title":"angry test", "gid":3}, 1000]'), 1 as skip_bad_json )</sphinxql>
<sphinxql>SHOW WARNINGS</sphinxql>
<sphinxql>CALL PQ ('pq_d1', ('{"title":"filter test doc2", "gid":13}','[{"title":"angry test", "gid":3}, 1000]'), 1 as skip_bad_json )</sphinxql>
<sphinxql>SHOW WARNINGS</sphinxql>

<sphinxql>CALL PQ ('pq', ('{"title":"filter test doc2", "gid":13}','[{"title":"angry test", "gid":3}, 1000]'), 0 as docs_json, 1 as skip_bad_json )</sphinxql>
<sphinxql>SHOW WARNINGS</sphinxql>
<sphinxql>CALL PQ ('pl_d1', ('{"title":"filter test doc2", "gid":13}','[{"title":"angry test", "gid":3}, 1000]'), 0 as docs_json, 1 as skip_bad_json )</sphinxql>
<sphinxql>SHOW WARNINGS</sphinxql>
<sphinxql>CALL PQ ('pq_d1', ('{"title":"filter test doc2", "gid":13}','[{"title":"angry test", "gid":3}, 1000]'), 0 as docs_json, 1 as skip_bad_json )</sphinxql>
<sphinxql>SHOW WARNINGS</sphinxql>

<!-- test that final stage filters work -->
<sphinxql>select id, id as quid, id*2 as quid2 from META:multi</sphinxql>

<!-- crash on query distributed PQ with empty doc -->
<sphinxql>CALL PQ ('META:multi', '', 0 as docs, 0 as verbose, 0 as docs_json, 0 as query, 'sharded' as mode)</sphinxql>

</sphqueries>

<httpqueries>

<!-- dpq queries via http -->

<query endpoint="json/pq/pq/search">{ "query": { "percolate": { "document" : {"title":"filter test doc2", "gid":13 } } } }</query>
<query endpoint="json/pq/pq/search">{ "query": { "percolate": { "documents" : [{"title":"angry test", "gid":3 }, { "title":"filter test doc2", "gid":13 }] } } }</query>

<query endpoint="json/pq/pq1/search">{ "query": { "percolate": { "document" : {"title":"filter test doc2", "gid":13 } } } }</query>
<query endpoint="json/pq/pq1/search">{ "query": { "percolate": { "documents" : [{"title":"angry test", "gid":3 }, { "title":"filter test doc2", "gid":13 }] } } }</query>

<query endpoint="json/pq/pl_d1/search">{ "query": { "percolate": { "document" : {"title":"filter test doc2", "gid":13 } } } }</query>
<query endpoint="json/pq/pl_d1/search">{ "query": { "percolate": { "documents" : [{"title":"angry test", "gid":3 }, { "title":"filter test doc2", "gid":13 }] } } }</query>

<query endpoint="json/pq/pq_d1/search">{ "query": { "percolate": { "document" : {"title":"filter test doc2", "gid":13 } } } }</query>
<query endpoint="json/pq/pq_d1/search">{ "query": { "percolate": { "documents" : [{"title":"angry test", "gid":3 }, { "title":"filter test doc2", "gid":13 }] } } }</query>

<query endpoint="json/pq/pl_d2/search">{ "query": { "percolate": { "document" : {"title":"filter test doc2", "gid":13 } } } }</query>
<query endpoint="json/pq/pl_d2/search">{ "query": { "percolate": { "documents" : [{"title":"angry test", "gid":3 }, { "title":"filter test doc2", "gid":13 }] } } }</query>

<query endpoint="json/pq/pm_d2/search">{ "query": { "percolate": { "document" : {"title":"filter test doc2", "gid":13 } } } }</query>
<query endpoint="json/pq/pm_d2/search">{ "query": { "percolate": { "documents" : [{"title":"angry test", "gid":3 }, { "title":"filter test doc2", "gid":13 }] } } }</query>

<query endpoint="json/pq/pq_d2/search">{ "query": { "percolate": { "document" : {"title":"filter test doc2", "gid":13 } } } }</query>
<query endpoint="json/pq/pq_d2/search">{ "query": { "percolate": { "documents" : [{"title":"angry test", "gid":3 }, { "title":"filter test doc2", "gid":13 }] } } }</query>


<!-- list queries. It works via usual json/search, not via json/pq/<idx>/search endpoint! -->
<query endpoint="json/search">{ "index": "pq"}</query>
<query endpoint="json/search">{ "index": "pq1"}</query>
<query endpoint="json/search">{ "index": "pl_d1"}</query>
<query endpoint="json/search">{ "index": "pq_d1"}</query>
<query endpoint="json/search">{ "index": "pl_d2"}</query>
<query endpoint="json/search">{ "index": "pm_d2"}</query>
<query endpoint="json/search">{ "index": "pq_d2"}</query>

</httpqueries>

</test>
