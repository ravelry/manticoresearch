<?xml version="1.0" encoding="utf-8"?>
<test>

<name>percolate query</name>
	<requires>
		<force-rt/>
	</requires>
<skip_indexer/>

<config>

searchd
{
	<searchd_settings/>
}

index pq
{
	type = percolate
	path			= <data_path/>/pq
	min_infix_len	= 2
	rt_field = title
}

index pq_filter
{
	type = percolate
	path = <data_path/>/pq_filter
	rt_field = title
	rt_attr_uint = gid
}

index pq_filter1
{
	type = percolate
	path = <data_path/>/pq_filter1
	rt_field = title
	rt_attr_json = j
	rt_attr_string = s
}

index pq_wild1
{
	type = percolate
	path			= <data_path/>/pq_wild1
	min_prefix_len	= 1
	rt_field = title
}

index pq_mva
{
	type = percolate
	path			= <data_path/>/pq_mva
	rt_field = title
	rt_attr_uint = gid
	rt_attr_multi = mva1
	rt_attr_multi = mva2
	rt_attr_multi = mva3
}

index pq_stem
{
	type = percolate
	path = <data_path/>/pq_stem
	rt_field = title
	rt_attr_uint = gid
	
    index_exact_words   = 1          
    morphology      = stem_ru    	
}


index pq_utf
{
	type = percolate
	path = <data_path/>/pq_utf
	rt_field = title
	rt_attr_uint = gid

	min_infix_len = 2
}

index wild_exact_rt
{
	type = rt
	path = <data_path/>/wild_exact_rt
	rt_field = title
	rt_attr_uint = gid

	min_infix_len = 2
    morphology = stem_en
}

index wild_exact_pq
{
	type = percolate
	path = <data_path/>/wild_exact_pq
	rt_field = title
	rt_attr_uint = gid

	min_infix_len = 2
    morphology = stem_en
}

</config>


<sphqueries>
<sphinxql>INSERT INTO pq (query) VALUES ( 'test' )</sphinxql>
<sphinxql>INSERT INTO pq (query) VALUES ( 'test | cat' )</sphinxql>
<sphinxql>INSERT INTO pq (query) VALUES ( 'tes*' )</sphinxql>
<sphinxql>INSERT INTO pq (query) VALUES ( '*ik*' )</sphinxql>
<sphinxql>CALL PQ ('pq', 'test 1', 1 as docs, 0 as docs_json )</sphinxql>
<sphinxql>CALL PQ ('pq', 'cat like me', 1 as docs, 0 as docs_json )</sphinxql>
<sphinxql>CALL PQ ('pq', ('test of many fields goes on', 'many fields join together for testik'), 1 as docs, 0 as docs_json )</sphinxql>

<!-- json documents -->
<sphinxql>CALL PQ ('pq', ('{"title":"testik goes on"}', '{"title":"cat but not dog"}'), 1 as docs, 1 as docs_json )</sphinxql>

<!-- query with position terms -->
<sphinxql>INSERT INTO pq (query) VALUES ( '"butter is"' )</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"title":"butter is good as"}', '{"title":"is butter"}'), 1 as docs, 1 as docs_json )</sphinxql>

<!-- query management by tags -->
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 1', 'base3 postid postid_11' )</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 2', 'base3 postid postid_12' )</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 3', 'base3 city' )</sphinxql>
<sphinxql>SELECT * FROM pq where tags any ('base3')</sphinxql>
<sphinxql>DELETE FROM pq where tags any ('postid')</sphinxql>
<sphinxql>SELECT * FROM pq where tags any ('base3')</sphinxql>
<sphinxql>DELETE FROM pq where tags any ('base3')</sphinxql>
<sphinxql>SELECT * FROM pq where tags any ('base3')</sphinxql>

<!-- filters -->
<sphinxql>INSERT INTO pq_filter (query, filters) VALUES ( 'filter test', 'gid &gt;= 10' )</sphinxql>
<sphinxql>INSERT INTO pq_filter (query, filters) VALUES ( 'filter test', 'gid &gt;= 10 OR gid &lt;= 3' )</sphinxql>
<sphinxql>SELECT * FROM pq_filter</sphinxql>
<sphinxql>CALL PQ ('pq_filter', ('{"title":"filter test doc1", "gid":2 }', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as docs_json )</sphinxql>

<!-- filter id -->
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 1', 'base3 postid postid_11' )</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 2', 'base3 postid postid_12' )</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 3', 'base3 city' )</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>SELECT * FROM pq WHERE id IN (1677721600001,1677721600004,1677721600005)</sphinxql>
<sphinxql>SELECT * FROM pq WHERE id &lt; 1677721600002</sphinxql>
<sphinxql>SELECT * FROM pq WHERE id &gt;= 1677721600004</sphinxql>
<sphinxql>SELECT * FROM pq WHERE id &gt;= 1677721600004 and tags any ('postid')</sphinxql>

<!-- query option -->
<sphinxql>CALL PQ ('pq_filter', ('{"title":"filter test doc1", "gid":2 }', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as docs_json, 1 as query )</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"title":"testik goes on"}', '{"title":"cat but not dog"}'), 1 as docs, 1 as docs_json, 1 as query )</sphinxql>

<!-- query uid -->
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 1', 'id_x1 id' )</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 2', 'id_x2 id' )</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>DELETE FROM pq where tags any ('postid')</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 3', 'id_x3 id' )</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>INSERT INTO pq (query, tags, id) VALUES ( 'test 4', 'id_x4 id', 1677721600013 )</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>REPLACE INTO pq (query, tags, id) VALUES ( 'test 4', 'id_x4 id', 1677721600013 )</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>DELETE FROM pq where id=1677721600016</sphinxql>
<sphinxql>DELETE FROM pq where id=1677721600014</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>INSERT INTO pq (query, tags, id) VALUES ( 'test 11', 'id_x11 id', 1677721600016 )</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>DELETE FROM pq where tags any ('id')</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>

<!-- list tags -->
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 1', 'base3 postid postid_11' )</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 2', 'base3 postid postid_12' )</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 3', 'base3 city' )</sphinxql>
<sphinxql>SELECT * FROM pq WHERE id &gt;= 1677721600004 and tags any ('postid')</sphinxql>
<sphinxql>SELECT * FROM pq WHERE id &gt;= 1677721600004 and tags not any ('postid')</sphinxql>
<sphinxql>SELECT * FROM pq WHERE id &gt;= 1677721600004 and tags!='' and tags not any ('postid')</sphinxql>
<sphinxql>SELECT * FROM pq WHERE tags any ('postid')</sphinxql>
<sphinxql>SELECT * FROM pq WHERE tags not any ('postid')</sphinxql>
<sphinxql>SELECT * FROM pq WHERE tags any ('city')</sphinxql>
<sphinxql>SELECT * FROM pq WHERE tags not any ('city')</sphinxql>

<!-- JSON field id to document uid -->
<sphinxql>INSERT INTO pq (query) VALUES ( 'butter is' )</sphinxql>
<sphinxql>INSERT INTO pq (query) VALUES ( 'butter was' )</sphinxql>
<sphinxql>INSERT INTO pq (query) VALUES ( 'filter test' )</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"title":"butter is good as", "id":3}', '{"title":"was butter", "id":4}', '{"title":"sas was butter", "id":5}', '{"title":"bas was butter", "id":10}', '{"title":"butter is good as", "id":11}'), 1 as docs, 1 as docs_json, 1 as query, 'id' as docs_id )</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"title":"filter test | is", "gid":2, "id":3 }', '{"title":"filter test | was", "gid":13, "id":10}'), 1 as docs, 1 as docs_json, 1 as query, 'id' as docs_id )</sphinxql>

<!-- query filter on JSON and strings -->
<sphinxql>INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 'j.gid &gt;= 3' )</sphinxql>
<sphinxql>INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 'j.gid &lt; 13' )</sphinxql>
<sphinxql>INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 's = \'more\'' )</sphinxql>
<sphinxql>INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 's != \'more\'' )</sphinxql>
<sphinxql>INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 's = \'more\' OR j.gid &gt; 10' )</sphinxql>
<sphinxql>CALL PQ ('pq_filter1', ('{"title":"filter test coming", "j":{"gid":3, "viw":3}, "s":"more", "x":"less", "id":1}', '{"title":"filter test passed", "j":{"gid":1, "viw":1}, "s":"no more", "x":"less too", "id":2}', '{"title":"filter test was", "j":{"gid":12, "viw":12}, "s":"more", "x":"less", "id":3}', '{"title":"filter test coming", "j":{"gid":13, "viw":13}, "s":"more or less", "x":"less too", "id":4}', '{"title":"filter test coming", "j":{"gid":11, "viw":11}, "s":"more", "x":"less", "id":5}'), 1 as docs, 1 as docs_json, 1 as query, 'id' as docs_id )</sphinxql>

<!-- JSON duplicates or groups at id field-->
<sphinxql>INSERT INTO pq (query) VALUES ( 'butter' )</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"title":"butter is good as", "group_id":3}', '{"title":"was butter", "group_id":4}', '{"title":"sas was butter", "group_id":3}', '{"title":"bas was butter", "group_id":3}', '{"title":"butter is good as", "group_id":5}'), 1 as docs, 1 as docs_json, 1 as query, 'group_id' as docs_id )</sphinxql>

<!-- negative id field-->
<sphinxql>CALL PQ ('pq', ('{"title":"butter is good as", "group_id":3}', '{"title":"was butter", "group_id":11}', '{"title":"sas was butter", "group_id":-2}', '{"title":"bas was butter", "group_id":-13}', '{"title":"butter is good as", "group_id":5}'), 1 as docs, 1 as docs_json, 1 as query, 'group_id' as docs_id )</sphinxql>

<!-- expression filter -->
<sphinxql>insert into pq_filter1 (query,filters) values('orange', 'j.price - 1 > 3')</sphinxql>
<sphinxql>insert into pq_filter1 (query,filters) values('orange', 'j.price - 1 > 3 OR j.tag IS NOT null')</sphinxql>
<sphinxql>insert into pq_filter1 (query,filters) values('orange', 'j.price - 1 > 3 OR any (x=\'test\' for x in j.tag)')</sphinxql>
<sphinxql>CALL PQ ('pq_filter1', ('{"title":"orange", "j":{ "price":5 } }', '{"title":"orange", "j":{ "price":3 } }', '{"title":"orange", "j":{ "tag":5 } }', '{"title":"orange", "j":{ "tag":["test"] } }' ), 1 as docs, 1 as docs_json, 1 as query )</sphinxql>

<!-- wildcard vs batch of docs -->
<sphinxql>INSERT INTO pq_wild1 (query) VALUES ( 'a* b*' )</sphinxql>
<sphinxql>CALL PQ ('pq_wild1', ('{"title":"abc"}','{"title":"acc"}','{"title":"be ce acc"}','{"title":"abc"}'), 1 as docs, 1 as docs_json, 1 as query )</sphinxql>

<!-- MVA filter -->
<sphinxql>insert into pq_mva (query, tags) values('orange', 'q1')</sphinxql>
<sphinxql>CALL PQ ('pq_mva', 'orange', 1 as docs, 0 as docs_json, 1 as query )</sphinxql>
<sphinxql>insert into pq_mva (query, filters, tags) values('orange', 'mva1 in (1, 9, 13)', 'q2')</sphinxql>
<sphinxql>CALL PQ ('pq_mva', ('{"title":"orange", "mva1":[1, 12]}', '{"title":"orange", "mva2":[13], "mva1":[8]}', '{"title":"orange", "mva1":[13]}' ), 1 as docs, 1 as docs_json, 1 as query )</sphinxql>
<sphinxql>insert into pq_mva (query, filters, tags) values('orange', 'mva3 &lt; 13', 'q31')</sphinxql>
<sphinxql>insert into pq_mva (query, filters, tags) values('orange', 'all(mva3) &lt; 13', 'q32')</sphinxql>
<sphinxql>insert into pq_mva (query, filters, tags) values('orange', 'any(mva3) &lt; 13', 'q33')</sphinxql>
<sphinxql>CALL PQ ('pq_mva', ('{"title":"orange", "mva3":[1, 12]}', '{"title":"orange", "mva2":[15], "mva3":[8,8,1]}', '{"title":"orange", "mva3":[13]}', '{"title":"orange", "mva2":[15], "mva3":[8,13,1]}'), 1 as docs, 1 as docs_json, 1 as query )</sphinxql>

<!-- full-scan queries -->
<sphinxql>insert into pq_mva (query, filters, tags) values('', 'mva3 &lt; 13', 'q31')</sphinxql>
<sphinxql>insert into pq_mva (query, filters, tags) values('', 'all(mva3) &lt; 13', 'q32')</sphinxql>
<sphinxql>insert into pq_mva (query, filters, tags) values('', 'any(mva3) &lt; 13', 'q33')</sphinxql>
<sphinxql>insert into pq_mva (query, tags) values('', 'q_all')</sphinxql>
<sphinxql>CALL PQ ('pq_mva', ('{"title":"black", "mva3":[1, 12]}', '{"mva2":[15], "mva3":[8,8,1]}', '{"mva3":[13]}', '{"mva2":[15], "mva3":[8,13,1]}'), 1 as docs, 1 as docs_json, 1 as query )</sphinxql>

<!-- bad filters -->
<sphinxql>insert into pq_filter1 (query,filters) values('orange', 'test > 3')</sphinxql>
<sphinxql>insert into pq_filter1 (query,filters) values('orange', 'test.price > 3')</sphinxql>
<sphinxql>insert into pq_filter1 (query,filters) values('orange', '@weight > 3')</sphinxql>
<sphinxql>select * from pq_filter1</sphinxql>

<!-- display schema -->
<sphinxql>describe pq</sphinxql>
<sphinxql>describe pq_filter</sphinxql>
<sphinxql>describe pq_filter1</sphinxql>
<sphinxql>describe pq_wild1</sphinxql>
<sphinxql>describe pq_mva</sphinxql>

<!-- display internal schema -->
<sphinxql>describe pq table</sphinxql>
<sphinxql>describe pq_filter table</sphinxql>
<sphinxql>describe pq_filter1 table</sphinxql>
<sphinxql>describe pq_wild1 table</sphinxql>
<sphinxql>describe pq_mva table</sphinxql>

<!-- group by tags -->
<sphinxql>insert into pq_mva (query, tags) values('test1', 'q33')</sphinxql>
<sphinxql>select id, count(*) c, tags from pq_mva group by tags</sphinxql>

<!-- regression stemmed terms missed -->
<sphinxql>INSERT INTO pq_stem (query) VALUES ( 'проверка' )</sphinxql>
<sphinxql>INSERT INTO pq_stem (query) VALUES ( 'проверки' )</sphinxql>
<sphinxql>CALL PQ ('pq_stem', 'была проверка', 1 as docs, 0 as docs_json )</sphinxql>
<sphinxql>CALL PQ ('pq_stem', 'проверки делом', 1 as docs, 0 as docs_json )</sphinxql>

<!-- regression wildcard match of utf8 chars at docs and queries -->
<sphinxql>INSERT INTO pq_utf (query) VALUES ( 'про*' )</sphinxql>
<sphinxql>INSERT INTO pq_utf (query) VALUES ( 'проверка' )</sphinxql>
<sphinxql>CALL PQ ('pq_utf', 'была проверка', 1 as docs, 0 as docs_json )</sphinxql>
<sphinxql>CALL PQ ('pq_utf', 'проверка делом', 1 as docs, 0 as docs_json )</sphinxql>

<!-- query filter on JSON with boolean conditions -->
<sphinxql>INSERT INTO pq_filter1 (query, filters) VALUES ( 'test', 'j.state.on = TRUE' )</sphinxql>
<sphinxql>INSERT INTO pq_filter1 (query, filters) VALUES ( 'test', 'j.state.on = FALSE' )</sphinxql>
<sphinxql>INSERT INTO pq_filter1 (query, filters) VALUES ( 'test', 'j.state.on != TRUE and j.state.alive = TRUE' )</sphinxql>
<sphinxql>CALL PQ ('pq_filter1', ('{"title":"test", "j":{"state":{"on": TRUE, "alive":1}, "viw":3}, "id":1}', '{"title":"test", "j":{"state":{"on": 0, "alive":0}, "viw":3}, "id":2}', '{"title":"test", "j":{"state":{"on": FALSE, "alive":TRUE}, "viw":3}, "id":3}'), 1 as docs, 1 as docs_json, 1 as query, 'id' as docs_id )</sphinxql>

<!-- regression exact followed by woldcard -->
<sphinxql>INSERT INTO wild_exact_rt (title) VALUES ( 'abc' ), ( 'abcdef' ), ( 'defabcdef' )</sphinxql>
<sphinxql>SELECT * from wild_exact_rt where MATCH('="*abc*"')</sphinxql>
<sphinxql>INSERT INTO wild_exact_pq (id, query) VALUES (1, '="*abc*"')</sphinxql>
<sphinxql>CALL PQ('wild_exact_pq', ('abc', 'abcdef', 'defabcdef'), 0 as docs_json, 1 as docs)</sphinxql>

</sphqueries>

</test>
