<?xml version="1.0" encoding="utf-8"?>
<test>

<name>percolate query</name>

<config>
indexer
{
	mem_limit				= 16M
}

searchd
{
	<searchd_settings/>
	workers = threads
}

source dummy
{
	type			= mysql
	<sql_settings/>
	sql_query		= select * from test_table
	sql_attr_uint	= gid
}

index dummy
{
	source			= dummy
	path			= <data_path/>/dummy
}

index pq
{
	type = percolate
	path			= <data_path/>/pq
	min_infix_len	= 2
	rt_field = title
}

index pq_filter
{
	type = percolate
	path = <data_path/>/pq_filter
	rt_field = title
	rt_attr_uint = gid
}

index pq_filter1
{
	type = percolate
	path = <data_path/>/pq_filter1
	rt_field = title
	rt_attr_json = j
	rt_attr_string = s
}

index pq_wild1
{
	type = percolate
	path			= <data_path/>/pq_wild1
	min_prefix_len	= 1
	rt_field = title
}

index pq_mva
{
	type = percolate
	path			= <data_path/>/pq_mva
	rt_field = title
	rt_attr_uint = gid
	rt_attr_multi = mva1
	rt_attr_multi = mva2
	rt_attr_multi = mva3
}


</config>

<db_create>
CREATE TABLE `test_table` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `gid` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
)
</db_create>
<db_drop>DROP TABLE IF EXISTS `test_table`;</db_drop>
<db_insert>INSERT INTO `test_table` VALUES ( 1, 1, 'test 1' )</db_insert>

<sphqueries>
<sphinxql>INSERT INTO pq VALUES ( 'test' )</sphinxql>
<sphinxql>INSERT INTO pq VALUES ( 'test | cat' )</sphinxql>
<sphinxql>INSERT INTO pq VALUES ( 'tes*' )</sphinxql>
<sphinxql>INSERT INTO pq VALUES ( '*ik*' )</sphinxql>
<sphinxql>CALL PQ ('pq', 'test 1', 1 as docs, 0 as docs_json )</sphinxql>
<sphinxql>CALL PQ ('pq', 'cat like me', 1 as docs, 0 as docs_json )</sphinxql>
<sphinxql>CALL PQ ('pq', ('test of many fields goes on', 'many fields join together for testik'), 1 as docs, 0 as docs_json )</sphinxql>

<!-- json documents -->
<sphinxql>CALL PQ ('pq', ('{"title":"testik goes on"}', '{"title":"cat but not dog"}'), 1 as docs, 1 as docs_json )</sphinxql>

<!-- query with position terms -->
<sphinxql>INSERT INTO pq VALUES ( '"butter is"' )</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"title":"butter is good as"}', '{"title":"is butter"}'), 1 as docs, 1 as docs_json )</sphinxql>

<!-- query management by tags -->
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 1', 'base3 postid postid_11' )</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 2', 'base3 postid postid_12' )</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 3', 'base3 city' )</sphinxql>
<sphinxql>SELECT * FROM pq where tags='base3'</sphinxql>
<sphinxql>DELETE FROM pq where tags='postid'</sphinxql>
<sphinxql>SELECT * FROM pq where tags='base3'</sphinxql>
<sphinxql>DELETE FROM pq where tags='base3'</sphinxql>
<sphinxql>SELECT * FROM pq where tags='base3'</sphinxql>

<!-- filters -->
<sphinxql>INSERT INTO pq_filter (query, filters) VALUES ( 'filter test', 'gid &gt;= 10' )</sphinxql>
<sphinxql>INSERT INTO pq_filter (query, filters) VALUES ( 'filter test', 'gid &gt;= 10 OR gid &lt;= 3' )</sphinxql>
<sphinxql>SELECT * FROM pq_filter</sphinxql>
<sphinxql>CALL PQ ('pq_filter', ('{"title":"filter test doc1", "gid":2 }', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as docs_json )</sphinxql>

<!-- filter uid -->
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 1', 'base3 postid postid_11' )</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 2', 'base3 postid postid_12' )</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 3', 'base3 city' )</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>SELECT * FROM pq WHERE uid IN (1,4,5)</sphinxql>
<sphinxql>SELECT * FROM pq WHERE uid &lt; 2</sphinxql>
<sphinxql>SELECT * FROM pq WHERE uid &gt;= 4</sphinxql>
<sphinxql>SELECT * FROM pq WHERE uid &gt;= 4 and tags='postid'</sphinxql>

<!-- query option -->
<sphinxql>CALL PQ ('pq_filter', ('{"title":"filter test doc1", "gid":2 }', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as docs_json, 1 as query )</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"title":"testik goes on"}', '{"title":"cat but not dog"}'), 1 as docs, 1 as docs_json, 1 as query )</sphinxql>

<!-- query uid -->
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 1', 'id_x1 id' )</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 2', 'id_x2 id' )</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>DELETE FROM pq where tags='postid'</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 3', 'id_x3 id' )</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>INSERT INTO pq (query, tags, id) VALUES ( 'test 4', 'id_x4 id', 8 )</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>REPLACE INTO pq (query, tags, id) VALUES ( 'test 4', 'id_x4 id', 8 )</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>DELETE FROM pq where id=11</sphinxql>
<sphinxql>DELETE FROM pq where id=9</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>INSERT INTO pq (query, tags, id) VALUES ( 'test 11', 'id_x11 id', 11 )</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>
<sphinxql>DELETE FROM pq where tags='id'</sphinxql>
<sphinxql>SELECT * FROM pq</sphinxql>

<!-- list tags -->
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 1', 'base3 postid postid_11' )</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 2', 'base3 postid postid_12' )</sphinxql>
<sphinxql>INSERT INTO pq (query, tags) VALUES ( 'test 3', 'base3 city' )</sphinxql>
<sphinxql>SELECT * FROM pq WHERE uid &gt;= 4 and tags='postid'</sphinxql>
<sphinxql>SELECT * FROM pq WHERE uid &gt;= 4 and tags!='postid'</sphinxql>
<sphinxql>SELECT * FROM pq WHERE tags='postid'</sphinxql>
<sphinxql>SELECT * FROM pq WHERE tags!='postid'</sphinxql>
<sphinxql>SELECT * FROM pq WHERE tags='city'</sphinxql>
<sphinxql>SELECT * FROM pq WHERE tags!='city'</sphinxql>

<!-- JSON field id to document uid -->
<sphinxql>INSERT INTO pq VALUES ( 'butter is' )</sphinxql>
<sphinxql>INSERT INTO pq VALUES ( 'butter was' )</sphinxql>
<sphinxql>INSERT INTO pq VALUES ( 'filter test' )</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"title":"butter is good as", "id":3}', '{"title":"was butter", "id":4}', '{"title":"sas was butter", "id":5}', '{"title":"bas was butter", "id":10}', '{"title":"butter is good as", "id":11}'), 1 as docs, 1 as docs_json, 1 as query, 'id' as docs_id )</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"title":"filter test | is", "gid":2, "id":3 }', '{"title":"filter test | was", "gid":13, "id":10}'), 1 as docs, 1 as docs_json, 1 as query, 'id' as docs_id )</sphinxql>

<!-- query filter on JSON and strings -->
<sphinxql>INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 'j.gid &gt;= 3' )</sphinxql>
<sphinxql>INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 'j.gid &lt; 13' )</sphinxql>
<sphinxql>INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 's = \'more\'' )</sphinxql>
<sphinxql>INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 's != \'more\'' )</sphinxql>
<sphinxql>INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 's = \'more\' OR j.gid &gt; 10' )</sphinxql>
<sphinxql>CALL PQ ('pq_filter1', ('{"title":"filter test coming", "j":{"gid":3, "viw":3}, "s":"more", "x":"less", "id":1}', '{"title":"filter test passed", "j":{"gid":1, "viw":1}, "s":"no more", "x":"less too", "id":2}', '{"title":"filter test was", "j":{"gid":12, "viw":12}, "s":"more", "x":"less", "id":3}', '{"title":"filter test coming", "j":{"gid":13, "viw":13}, "s":"more or less", "x":"less too", "id":4}', '{"title":"filter test coming", "j":{"gid":11, "viw":11}, "s":"more", "x":"less", "id":5}'), 1 as docs, 1 as docs_json, 1 as query, 'id' as docs_id )</sphinxql>

<!-- JSON duplicates or groups at id field-->
<sphinxql>INSERT INTO pq VALUES ( 'butter' )</sphinxql>
<sphinxql>CALL PQ ('pq', ('{"title":"butter is good as", "group_id":3}', '{"title":"was butter", "group_id":4}', '{"title":"sas was butter", "group_id":3}', '{"title":"bas was butter", "group_id":3}', '{"title":"butter is good as", "group_id":5}'), 1 as docs, 1 as docs_json, 1 as query, 'group_id' as docs_id )</sphinxql>

<!-- negative id field-->
<sphinxql>CALL PQ ('pq', ('{"title":"butter is good as", "group_id":3}', '{"title":"was butter", "group_id":11}', '{"title":"sas was butter", "group_id":-2}', '{"title":"bas was butter", "group_id":-13}', '{"title":"butter is good as", "group_id":5}'), 1 as docs, 1 as docs_json, 1 as query, 'group_id' as docs_id )</sphinxql>

<!-- expression filter -->
<sphinxql>insert into pq_filter1 (query,filters) values('orange', 'j.price - 1 > 3')</sphinxql>
<sphinxql>insert into pq_filter1 (query,filters) values('orange', 'j.price - 1 > 3 OR j.tag IS NOT null')</sphinxql>
<sphinxql>insert into pq_filter1 (query,filters) values('orange', 'j.price - 1 > 3 OR any (x=\'test\' for x in j.tag)')</sphinxql>
<sphinxql>CALL PQ ('pq_filter1', ('{"title":"orange", "j":{ "price":5 } }', '{"title":"orange", "j":{ "price":3 } }', '{"title":"orange", "j":{ "tag":5 } }', '{"title":"orange", "j":{ "tag":["test"] } }' ), 1 as docs, 1 as docs_json, 1 as query )</sphinxql>

<!-- wildcard vs batch of docs -->
<sphinxql>INSERT INTO pq_wild1 VALUES ( 'a* b*' )</sphinxql>
<sphinxql>CALL PQ ('pq_wild1', ('{"title":"abc"}','{"title":"acc"}','{"title":"be ce acc"}','{"title":"abc"}'), 1 as docs, 1 as docs_json, 1 as query )</sphinxql>

<!-- MVA filter -->
<sphinxql>insert into pq_mva (query, tags) values('orange', 'q1')</sphinxql>
<sphinxql>CALL PQ ('pq_mva', 'orange', 1 as docs, 0 as docs_json, 1 as query )</sphinxql>
<sphinxql>insert into pq_mva (query, filters, tags) values('orange', 'mva1 in (1, 9, 13)', 'q2')</sphinxql>
<sphinxql>CALL PQ ('pq_mva', ('{"title":"orange", "mva1":[1, 12]}', '{"title":"orange", "mva2":[13], "mva1":[8]}', '{"title":"orange", "mva1":[13]}' ), 1 as docs, 1 as docs_json, 1 as query )</sphinxql>
<sphinxql>insert into pq_mva (query, filters, tags) values('orange', 'mva3 &lt; 13', 'q31')</sphinxql>
<sphinxql>insert into pq_mva (query, filters, tags) values('orange', 'all(mva3) &lt; 13', 'q32')</sphinxql>
<sphinxql>insert into pq_mva (query, filters, tags) values('orange', 'any(mva3) &lt; 13', 'q33')</sphinxql>
<sphinxql>CALL PQ ('pq_mva', ('{"title":"orange", "mva3":[1, 12]}', '{"title":"orange", "mva2":[15], "mva3":[8,8,1]}', '{"title":"orange", "mva3":[13]}', '{"title":"orange", "mva2":[15], "mva3":[8,13,1]}'), 1 as docs, 1 as docs_json, 1 as query )</sphinxql>

<!-- full-scan queries -->
<sphinxql>insert into pq_mva (query, filters, tags) values('', 'mva3 &lt; 13', 'q31')</sphinxql>
<sphinxql>insert into pq_mva (query, filters, tags) values('', 'all(mva3) &lt; 13', 'q32')</sphinxql>
<sphinxql>insert into pq_mva (query, filters, tags) values('', 'any(mva3) &lt; 13', 'q33')</sphinxql>
<sphinxql>insert into pq_mva (query, tags) values('', 'q_all')</sphinxql>
<sphinxql>CALL PQ ('pq_mva', ('{"title":"black", "mva3":[1, 12]}', '{"mva2":[15], "mva3":[8,8,1]}', '{"mva3":[13]}', '{"mva2":[15], "mva3":[8,13,1]}'), 1 as docs, 1 as docs_json, 1 as query )</sphinxql>

<!-- bad filters -->
<sphinxql>insert into pq_filter1 (query,filters) values('orange', 'test > 3')</sphinxql>
<sphinxql>insert into pq_filter1 (query,filters) values('orange', 'test.price > 3')</sphinxql>
<sphinxql>insert into pq_filter1 (query,filters) values('orange', '@weight > 3')</sphinxql>
<sphinxql>select * from pq_filter1</sphinxql>

</sphqueries>

</test>
